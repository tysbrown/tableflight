name: Deploy to EKS

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: tableflight-stage
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY_UI: ui
  ECR_REPOSITORY_API: api

jobs:
  build-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ env.AWS_REGION }}

      - name: Build and push API Docker image
        run: |
          TAG=${GITHUB_SHA}
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_API }}:$TAG -f apps/api/Dockerfile .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_API }}:$TAG

  build-ui:
    runs-on: ubuntu-latest
    needs: build-api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ env.AWS_REGION }}

      - name: Build and push UI Docker image
        run: |
          TAG=${GITHUB_SHA}
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_UI }}:$TAG -f apps/ui/Dockerfile .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_UI }}:$TAG

      - name: Cleanup Docker images
        run: docker system prune -f

  deploy-ingress:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.22.0

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Install cert-manager CRDs
        run: |
          kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.8.0/cert-manager.crds.yaml

      - name: Deploy cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm update --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.8.0 --force

      - name: Apply ClusterIssuer
        run: |
          kubectl apply -f cluster-issuer.yaml

      - name: Deploy Nginx Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install --timeout 180s ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace

  deploy-api:
    runs-on: ubuntu-latest
    needs: [build-api, deploy-ingress]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.22.0

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Deploy API
        run: |
          helm upgrade --install --timeout 180s api .deployment/api --set image.repository=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_API }},image.tag=${GITHUB_SHA}

  deploy-ui:
    runs-on: ubuntu-latest
    needs: [build-ui, deploy-ingress]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.22.0

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Deploy UI
        run: |
          helm upgrade --install --timeout 180s ui .deployment/ui --set image.repository=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_UI }},image.tag=${GITHUB_SHA}
